<div class="@_badgeClass" style="@_badgeStyle" title="@Tooltip" @attributes="AdditionalAttributes">
	<span>@_badgeString</span>
</div>

@code {
	#region Parameters
	[Parameter]
	public string Name { get; set; }

	[Parameter]
	public dynamic Color { get; set; }

	[Parameter]
	public bool UseFullString { get; set; } = false;

	[Parameter]
	public string Tooltip { get; set; }

	[Parameter]
	public bool LargeDisplay { get; set; }

	[Parameter]
	public string AdditionalClasses { get; set; }

	[Parameter(CaptureUnmatchedValues = true)]
	public IDictionary<string, object> AdditionalAttributes { get; set; }
	#endregion

	#region Properties
	private string _badgeString, _badgeClass, _badgeStyle;
	private Colors _colors;
	#endregion

	#region Overrides
	protected override void OnParametersSet()
	{
		_badgeString = "";
		SetColorIfNull();
		if (UseFullString || IsAllUpper(Name))
		{
			_badgeString = Name;
		}
		else
		{
			List<string> wordList = Name.Split(' ').ToList();

			foreach (string word in wordList)
			{
				if (word.Length > 0)
				{
					_badgeString = _badgeString + word[0].ToString().ToUpper();
				}
			}
		}

		_badgeClass = "og-badge-subtle" + " " + Color.BackgroundCssClass + " " + Color.CssClass;
		_badgeClass += " " + AdditionalClasses;
		if (LargeDisplay)
		{
			_badgeClass += " large";
		}
		_badgeStyle = "color: " + Color.HexCode + "; border: 1px solid " + Color.HexCode + ";";

		if (_badgeString.Length > 3)
		{
			_badgeString = _badgeString.Substring(0, 3) + "...";
		}
	}
	#endregion
	#region Helper Methods
	private void SetColorIfNull()
	{
		if (Color == null)
		{
			_colors = new Colors();
			Color = _colors.GetRandomThemeColor();
		}
	}

	private bool IsAllUpper(string input)
	{
		for (int i = 0; i < input.Length; i++)
		{
			if (Char.IsLetter(input[i]) && !Char.IsUpper(input[i]))
				return false;
		}
		return true;
	}
	#endregion
}