@using BlazingApple.Components.Services
@using BlazingApple.Components.Search
@using s = BlazingApple.Components.Services

<div class="d-flex align-items-center" style="flex-direction:column;">
    <BlazingApple.Components.Search.SearchBox OnSearchChange="OnSearchChange" TitleText="@SearchGhostText" />


    <div class="btn-matrix" role="group" aria-label="Three Column Button Matrix">
        @foreach (BlazingApple.Components.Services.IconType icon in Enum.GetValues<BlazingApple.Components.Services.IconType>().OrderBy(val=>val.ToString()))
        {
            if (icon is s.IconType.OurGov or s.IconType.SealHouse or s.IconType.SealPresident or s.IconType.GovTrack or s.IconType.CSpan or s.IconType.Null or s.IconType.SealSenate or s.IconType.LoadingFullPage)
            {
                continue;
            }
            else if (!string.IsNullOrEmpty(_searchString) && !icon.ToString().ToLower().Contains(_searchString))
            {
                continue;
            }
            else
            {
                IconData iconData = Icon.Get(icon);
                <button type="button" class="@($"btn {(Value == iconData ? SelectedButtonClasses : ButtonClasses)}")" attributes="@AdditionalAttributes" @onclick=@(() => Set(iconData))>
                    <BlazingApple.Components.Icon I="@icon"></BlazingApple.Components.Icon> @iconData.ToString()
                </button>
                
            }
        }

        @if (CustomIcons is not null)
        {
            @foreach (string iconName in CustomIcons.Keys)
            {
                <button type="button" class="@($"btn {ButtonClasses}")" attributes="@AdditionalAttributes">
                    <BlazingApple.Components.Icon CustomIcon="@CustomIcons[iconName]"></BlazingApple.Components.Icon> @iconName
                </button>
            }
        }
    </div>
</div>