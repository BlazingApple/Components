@using BlazingApple.Components.Icons;
@using BlazingApple.Components.Services
@using BlazingApple.Components.Search
@using IconType = BlazingApple.Components.Services.IconType

<div class="d-flex align-items-center" style="flex-direction:column;">
    <BlazingApple.Components.Search.SearchBox OnSearchChange="OnSearchChange" TitleText="@SearchGhostText" />


    @if (!string.IsNullOrEmpty(_searchString))
    {
        @if (_isLoading)
        {
            <Loading />
        }
        else if (_searchResultIcons is not null)
        {
            <div class="btn-matrix" role="group" aria-label="Three Column Button Matrix">

                @foreach (KeyValuePair<string, string> kvp in _searchResultIcons)
                {
                    IconData iconData = new(kvp.Value, kvp.Key);

                    <button type="button" class="@($"btn {(Value == iconData ? SelectedButtonClasses : ButtonClasses)}")" attributes="@AdditionalAttributes" @onclick=@(() => Set(iconData))>
                        <BlazingApple.Components.Icon CustomIcon="@iconData.IconClasses"></BlazingApple.Components.Icon> @iconData.ToString()
                    </button>
                }

                @if (CustomIcons is not null)
                {
                    @foreach (string iconName in CustomIcons.Keys)
                    {
                        @if (!string.IsNullOrEmpty(_searchString) && iconName.ToLower().Contains(_searchString))
                        {
                            <button type="button" class="@($"btn {ButtonClasses}")" attributes="@AdditionalAttributes">
                                <BlazingApple.Components.Icon CustomIcon="@CustomIcons[iconName]"></BlazingApple.Components.Icon> @iconName
                            </button>
                        }

                    }
                }
            </div>
        }
    }
    else
    {
        <div class="btn-matrix" role="group" aria-label="Three Column Button Matrix">
            @foreach (BlazingApple.Components.Services.IconType icon in Enum.GetValues<BlazingApple.Components.Services.IconType>().OrderBy(val => val.ToString()))
            {
                if (icon is IconType.OurGov or IconType.SealHouse or IconType.SealPresident or IconType.GovTrack or IconType.CSpan or IconType.Null or IconType.SealSenate or IconType.LoadingFullPage)
                {
                    continue;
                }
                else
                {
                    IconData iconData = IconCore.Get(icon);
                    <button type="button" class="@($"btn {(Value == iconData ? SelectedButtonClasses : ButtonClasses)}")" attributes="@AdditionalAttributes" @onclick=@(() => Set(iconData))>
                        <BlazingApple.Components.Icon I="@icon"></BlazingApple.Components.Icon> @iconData.ToString()
                    </button>

                }
            }

            @if (CustomIcons is not null)
            {
                @foreach (string iconName in CustomIcons.Keys)
                {
                    <button type="button" class="@($"btn {ButtonClasses}")" attributes="@AdditionalAttributes">
                        <BlazingApple.Components.Icon CustomIcon="@CustomIcons[iconName]"></BlazingApple.Components.Icon> @iconName
                    </button>
                }
            }
        </div>
    }
</div>