@if (record == null && string.IsNullOrEmpty(slug))
{
	<Loading Style="Loading.LoadingStyle.Subtle" />
}
else
{
	<span class="recordActions">
		@if (OnEditPage)
		{
			<BrowserLink href="@detailsRoute">Details</BrowserLink>
		}
		else if (OnDetailsPage)
		{
			if (!OnEditClick.HasDelegate)
			{
				<BrowserLink href="@editRoute">Edit</BrowserLink>
			}
			else
			{
				<a href="javascript:void(0);" role="button" @onclick="_OnEditClick">Edit</a>
			}
		}
		else
		{
			if (!HideEditButton)
			{
				if (!OnEditClick.HasDelegate)
				{
					if (DisplayEditAsIcon)
					{
						<BrowserLink href="@editRoute"><Icon I="s.IconType.Edit" AltText="Edit" /></BrowserLink> @vertBar
					}
					else
					{
						<BrowserLink href="@editRoute">Edit</BrowserLink> @vertBar
					}
				}
				else
				{
					if (DisplayEditAsIcon)
					{
						<a href="javascript:void(0);" role="button" class="mr-1" @onclick="_OnEditClick"><Icon I="s.IconType.Edit" AltText="Edit"></Icon></a>
					}
					else
					{
						<a href="javascript:void(0);" role="button" @onclick="_OnEditClick">Edit</a>
					}
				}
			}
			<a href="javascript:void(0);" @onclick="_OnDeleteClick"><Icon I="s.IconType.Delete" AltText="Delete" /></a>
		}
	</span>
}

@code {
	[Parameter]
	public string route { get; set; }

	[Parameter]
	public dynamic record { get; set; }

	/// <summary>
	/// If record is not populated, we use this as the route Identifier.
	/// </summary>
	[Parameter]
	public string slug { get; set; }

	[Parameter]
	public bool OnDetailsPage { get; set; }

	[Parameter]
	public bool OnEditPage { get; set; }

	[Parameter]
	public EventCallback<string> OnDeleteClick { get; set; }

	[Parameter]
	public EventCallback<string> OnEditClick { get; set; }

	/// <summary>
	/// If this is set to true, then the edit button will always be an icon. If it is not set or set to false
	/// the edit button is not guaranteed to be text, it could still be an icon, based on the default styles.
	/// </summary>
	[Parameter]
	public bool DisplayEditAsIcon { get; set; }

	[Parameter]
	public bool HideEditButton { get; set; }

	private void _OnDeleteClick()
	{
		if(OnDeleteClick.HasDelegate)
			OnDeleteClick.InvokeAsync(idForRoute);
	}

	private void _OnEditClick()
	{
		if(OnEditClick.HasDelegate)
			OnEditClick.InvokeAsync(idForRoute);
	}

	string editRoute { get; set; }
	string detailsRoute { get; set; }
	string deleteRoute { get; set; }
	string vertBar = "|";
	string idForRoute { get; set; }

	protected override void OnParametersSet()
	{
		if (record != null)
		{
			idForRoute = record.Id.ToString();
		}
		else
		{
			idForRoute = slug;
		}
		editRoute = route + "/edit/" + idForRoute;
		detailsRoute = route + "/" + idForRoute;
		deleteRoute = "/api" + route + "/" + idForRoute; // Route starts with /
	}

}
