@Response

@code {
	#region Parameters
	[Parameter]
	public ErrorType Type { get; set; }
	#endregion
	#region Properties
	private static readonly string[] connectivityResponses = {
		"Zoinks! We've had an issue communicating with the database. This issue has been reported.",
		"Ruh-roh, it seems there's a connectivity issue. Check your internet, if that's working, it's on us." +
			"\nThis issue has been recorded."
	};

	private static readonly string[] validationResponses = {
		"Jeepers, you've forgotten to fill out a few fields. Get those cleaned up and we'll file away your data.",
		"Ruh-roh! It seems there are a few fields that need fixing up. Make some changes and try again!"
	};

	private string Response
	{
		get
		{
			return ResponseError.GetResponse(Type);
		}
	}
	#endregion

	public static string GetResponse(ErrorType type = ErrorType.ServerError)
	{

		switch (type)
		{
			case ErrorType.FormValidationError:
				return ResponseError.GetValidationResponse();
			case ErrorType.ServerError:
				return ResponseError.GetServerResponse();
			default:
				return string.Empty;
		}
	}

	private static string GetServerResponse()
	{
		int count = connectivityResponses.Length;
		return connectivityResponses[new Random().Next(0, count)];
	}

	private static string GetValidationResponse()
	{
		int count = validationResponses.Length;
		return validationResponses[new Random().Next(0, count)];
	}

	public enum ErrorType
	{
		FormValidationError,
		ServerError
	}
}
